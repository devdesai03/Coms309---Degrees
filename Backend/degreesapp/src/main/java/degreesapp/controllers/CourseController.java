package degreesapp.controllers;

import degreesapp.models.Course;
import degreesapp.services.CourseService;
import io.swagger.annotations.Api;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@Api ( tags = "Course",
        description = "List, search, view, add, and update courses." )
public class CourseController {
    @Autowired
    private CourseService courseService;

    @GetMapping ( "/courses" )
    @Operation (
            summary = "List and search courses",
            description = "Use this endpoint to fetch a list of courses. " +
                    "The courses are guaranteed to be sorted by department code first, " +
                    "then by course number in numeric order.\n" +
                    "Use the `departmentId`, `departmentCode`, and `courseNumber` request parameters " +
                    "to filter the list of courses. You can use any combination of them. For example, " +
                    "`departmentCode` and `courseNumber` will, when combined, filter a list of courses " +
                    "by both their department codes and course numbers, and because a department code " +
                    "and course number uniquely identifies a course, would return an array of length zero or one." )
    public List<Course> getCourses(
            @Parameter ( description = "When specified, filters the courses by" +
                    " their department's ID (a meaningless numeric value used as the primary key)." )
            @RequestParam ( required = false ) Long departmentId ,
            @Parameter ( description = "When specified, filters the courses by " +
                    "their department code, such as \"COM S\"." )
            @RequestParam ( required = false ) String departmentCode ,
            @Parameter ( description = "When specified, filters the courses by " +
                    "their number, such as \"309\". This should generally be " +
                    "specified in combination with `departmentCode` or `departmentId`, " +
                    "but that is not required." )
            @RequestParam ( required = false ) String courseNumber) {
        return courseService.fetchCourseListFiltered(
                departmentId ,
                departmentCode ,
                courseNumber
        );
    }

    @Operation (
            summary = "Create new course"
    )
    @PostMapping ( "/courses/course" )
    public Course createCourse(@RequestBody Course course) {
        return courseService.saveCourse(course);
    }

    @Operation (
            summary = "Get a course by ID"
    )
    @GetMapping ( "/courses/{courseId}" )
    public Course getCourseById(
            @Parameter ( description = "The course ID, which is a meaningless, autogenerated numeric value " +
                    "that serves as the course's primary key in the database." )
            @PathVariable Long courseId) {
        return courseService.fetchCourseById(courseId);
    }

    @PutMapping ( "/courses/{courseId}" )
    @Operation (
            summary = "Update a specific course",
            description = "Use this endpoint to \"update\" a course. " +
                    "This means replacing the existing data of the course " +
                    "with the new data in the request body."
    )
    public Course updateCourseById(@PathVariable Long courseId , @RequestBody Course course) {
        course.setCourseId(courseId);
        return courseService.saveCourse(course);
    }

    @DeleteMapping ( "/course/{courseName}" )
    public ResponseEntity<String> deleteCourseByCourseName(@PathVariable String courseName) {
        Course courseToDelete = courseService.fetchByCourseName(courseName);
        if ( courseToDelete != null ) {
            courseService.delete(courseToDelete);
            return ResponseEntity.ok("Course deleted successfully");
        } else {
            return ResponseEntity.status(403).body("Course not found");
        }
    }
}
